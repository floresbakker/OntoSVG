prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix doc: <https://data.rijksfinancien.nl/svg/doc/id/> 
prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rule: <http://www.w3.org/XML/1998/namespace#model/rule/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix shp: <http://www.w3.org/XML/1998/namespace#model/shp/>
prefix svg: <https://data.rijksfinancien.nl/svg/model/def/>
prefix target: <http://www.w3.org/XML/1998/namespace#model/target/>
prefix vann: <http://purl.org/vocab/vann/>
prefix xml: <http://www.w3.org/XML/1998/namespace#model/def/> 
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xsi: <http://www.w3.org/2001/XMLSchema-instance#>
prefix xmlns: <http://www.w3.org/2000/xmlns/>
prefix xlink: <http://www.w3.org/1999/xlink#> 

prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix respec: <https://respec.org/model/>
prefix section: <https://data.rijksfinancien.nl/svg/id/section/>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix standard: <https://data.rijksfinancien.nl/svg/id/standard/>
prefix status: <http://purl.org/adms/status/>

### XML Shapes ###

shp:SerializableNode
    a sh:NodeShape;
    sh:rule rule:XMLFragmentSerializationAlgorithm;
    sh:target target:SerializableNode;
    skos:prefLabel 'serializable node shape'@en;
    rdfs:isDefinedBy xml:.

  target:SerializableNode
    a sh:SPARQLTarget;
    rdfs:comment 'Select nodes in a XML document that do not have an XML fragment yet, and whose child nodes all have an XML fragment already.'@en;
    sh:prefixes xml:;
    sh:select '''
select $this {

  # Select all DOM nodes... 
  $this a/rdfs:subClassOf* dom:Node.
    
  # ...that do not yet have an xml fragment.
  filter not exists { $this xml:fragment []. }
  
  # ...but whose child nodes all have an xml fragment
  minus {
    $this ?member ?child.
    filter(strstarts(str(?member),concat(str(rdf:),'_')))               
    filter not exists { ?child xml:fragment []. }
    ?child a/rdfs:subClassOf* dom:Node.
  }
}''';
    rdfs:isDefinedBy xml:.

  rule:XMLFragmentSerializationAlgorithm
    a sh:SPARQLRule;
    rdfs:comment 'Create the XML fragment for a node in a XML document.'@en;
    skos:prefLabel 'XML fragment serialization algorithm'@en;
    sh:prefixes xml:;
    sh:construct '''
construct {

  # Assert the new XML fragment for this node in the XML document
  $this xml:fragment ?fragment.
  
} where {

  # Establish the class of the node in the XML document
  $this a/rdfs:subClassOf* ?classXML.
  ?classXML rdfs:isDefinedBy xml:.

  # Build the XML fragment for the node in the XML document depending on its class
  bind(if(?classXML = xml:Element,                function:getElementFragment($this), 
       if(?classXML = xml:Text ,                  function:getTextFragment($this), 
       if(?classXML = xml:Comment,                function:getCommentFragment($this), 
       if(?classXML = xml:CDATASection,           function:getCDATASectionFragment($this), 
       if(?classXML = xml:ProcessingInstruction,  function:getProcessingInstructionFragment($this), 
       if(?classXML = xml:DocumentType,           function:getDocumentTypeFragment($this), 
       if(?classXML = xml:Document,               function:getChildNodeFragment($this), ?unboundDummy)))))))
  as ?fragment)
  
  # Convert result from string to rdf:XML
  # bind(strdt(str(?fragmentString), rdf:XML) as ?fragment)

}''';
    rdfs:isDefinedBy xml:.

function:getElementFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML element in a XML document." ;
    sh:parameter [
        sh:path function:element ;
        sh:datatype xsd:anyURI ;
        sh:description "A xml element in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>  
    prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    prefix vann: <http://purl.org/vocab/vann/>
    prefix xml: <http://www.w3.org/XML/1998/namespace#model/def/>
    
    select ?result where {
    
    # Retrieve the tag name & namespace of the element.
    $element a ?class.
    ?class xml:tag ?tag;
           rdfs:isDefinedBy ?ontology.

    # Get the XML attributes for the element, if there are any.
    bind(function:getElementAttribute($element, ?ontology) as ?attributes)
 
    # Get the XML fragments of child nodes for the element, if there are any.
    bind(function:getChildNodeFragment($element) as ?childFragments)
    
    # Build the XML fragment for this XML element, by combining everything retrieved above.
    bind(
    concat(
      '<',?tag,if(?attributes='','',concat(' ',?attributes)),'>',
      if(?childFragments='',concat('</',?tag,'>'),concat(?childFragments,'</',?tag,'>'))) as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
      
}
	
""" .

function:getTextFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML text node in a XML document." ;
    sh:parameter [
        sh:path function:text ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML text node in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
    
    prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
    prefix xsd: <http://www.w3.org/2001/XMLSchema#>     
    
    select ?result where {
    
    # Text is stored in de data attribute of DOM text nodes
    $text dom:data ?data.
    
    # Establish the XML fragment for this XML text node
    bind(strdt(?data,xsd:string) as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
}
	
""" .

function:getCommentFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML comment in a XML document." ;
    sh:parameter [
        sh:path function:comment ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML comment in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>
    
    select ?result where {
     
    # Establish the XML fragment for this XML comment
    bind(concat('<!--',function:getChildNodeFragment($comment),'-->') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
}
	
""" .

function:getCDATASectionFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML CDATA Section in a XML document." ;
    sh:parameter [
        sh:path function:CDATASection ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML CDATA Section in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>
    
    select ?result where {
     
    # Establish the XML fragment for this XML CDATA
    bind(concat('<![CDATA[',function:getChildNodeFragment($CDATASection),']]>') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
}
	
""" .

function:getProcessingInstructionFragment
    a sh:SPARQLFunction ;
    rdfs:processingInstruction "Returns a XML fragment for a XML processing instruction in a XML document." ;
    sh:parameter [
        sh:path function:processingInstruction ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML processing instruction in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>       
    
    select ?result where {

    # Establish the XML fragment for this XML processingInstruction
    bind(concat('<?',function:getChildNodeFragment($processingInstruction),'>') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)    
}
	
""" .

function:getDocumentTypeFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML DocumentType in a XML document." ;
    sh:parameter [
        sh:path function:doctype ;
        sh:datatype xsd:anyURI ;
        sh:description "An XML DocumentType in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
    
    prefix xml: <http://www.w3.org/XML/1998/namespace#model/def/>
    
    select ?result where {
    
    # Establish the doctype name for this Document Type.
    $doctype xml:documentTypeName ?name.
    bind(concat('<!DOCTYPE ',str(?name),'>') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)    
}
	
""" .
	
function:getDocumentFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML Document" ;
    sh:parameter [
        sh:path function:xmlDocument ;
        sh:datatype xsd:anyURI ;
        sh:description "An XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>    
    
    select ?result where {
    
    # Establish the XML fragment of the XML document by retrieving the XML fragments of all child nodes.
    bind(function:getChildNodeFragment($xmlDocument) as ?result)
    
}
	
""" .

function:getChildNodeFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment of child nodes for a node in an XML Document" ;
    sh:parameter [
        sh:path function:parentNode ;
        sh:datatype xsd:anyURI ;
        sh:description "A node in an XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
    
    prefix xml: <http://www.w3.org/XML/1998/namespace#model/def/>
  	prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
    
    select ?result where {
    
    { # Get the XML fragments of child nodes, if there are any.
    select $parentNode (group_concat(str(?childFragment);separator='') as ?childFragments) {
      {
        select $parentNode ?member ?childFragment {
          $parentNode ?member ?childNode.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?childNode xml:fragment ?childFragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
       }
      } group by $parentNode
     }
    bind(if(bound(?childFragments),?childFragments,'') as ?result) 
    }
""" .

function:getElementAttribute
    a sh:SPARQLFunction ;
    rdfs:comment "Returns an XML attribute of an XML element" ;
    sh:parameter [
        sh:path function:element ;
        sh:datatype xsd:anyURI ;
        sh:description "An XML element in an XML document." ;
        sh:order 1;
    ] ;
     sh:parameter [
        sh:path function:ontology ;
        sh:datatype xsd:anyURI ;
        sh:description "A ontology that defines an element class." ;
        sh:order 2;
    ] ;   
    sh:returnType xsd:string ;
    sh:select """
    
    prefix function: <http://www.w3.org/XML/1998/namespace#model/function/>    
    prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    prefix vann: <http://purl.org/vocab/vann/>
    prefix xml: <http://www.w3.org/XML/1998/namespace#model/def/>
    
    select ?result where {
   
    { # Get the XML attributes for this element, if there are any.
    select $element (group_concat(distinct ?attribute) as ?attributes) {
      $element ?attribute0 ?value.
      ?attribute0 rdfs:subPropertyOf xml:attribute.
      bind(function:getXMLKey(?attribute0, $ontology) as ?key)
      bind(concat(?key,'="',str(?value),'"') as ?attribute)
      } group by $element
     }   
    bind(if(bound(?attributes),?attributes,'') as ?result) 
    }
""" .

function:getXMLKey
    a sh:SPARQLFunction ;
    rdfs:comment "Returns the key of an XML attribute, either with or without prefix." ;
    sh:parameter [
        sh:path function:attribute ;
        sh:datatype xsd:anyURI ;
        sh:description "An xml attribute as defined in an ontology." ;
        sh:order 1;
    ] ;
     sh:parameter [
        sh:path function:ontology ;
        sh:datatype xsd:anyURI ;
        sh:description "An ontology that defines the class of the element that is connected to the attribute." ;
        sh:order 2;
    ] ;      
    sh:returnType xsd:string ;
    sh:select """

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix vann: <http://purl.org/vocab/vann/>
prefix xml: <http://www.w3.org/XML/1998/namespace#model/def/>

SELECT ?result WHERE {

         $attribute xml:key ?key;
                    rdfs:isDefinedBy ?ontologyAttribute.   
         ?ontologyAttribute vann:preferredNamespacePrefix ?prefix.
         
         # If the attribute as defined in an ontology is used on an element of the same ontology, we do not have to include a prefix in the key of the attribute. If not, we append the prefix to the key. An exception is made for the xml:xmlns attribute.
         
         bind(if(?ontologyAttribute = $ontology || $attribute = xml:xmlns,?key,concat(?prefix,":",?key)) as ?result)
  }

       """ . 

### Data ###

dom:Node
    a owl:Class;
    rdfs:isDefinedBy dom:.

dom:Document
    a owl:Class;
    rdfs:subClassOf dom:Node;
    rdfs:isDefinedBy dom:.

dom:DocumentType
    a owl:Class;
    rdfs:subClassOf dom:Node;
    rdfs:isDefinedBy dom:.

dom:CharacterData
    a owl:Class;
    rdfs:subClassOf dom:Node;
    rdfs:isDefinedBy dom:.

dom:Text
    a owl:Class;
    rdfs:subClassOf dom:CharacterData;
    rdfs:isDefinedBy dom:.
        
dom:Element
    a owl:Class;
    rdfs:subClassOf dom:Node;
    rdfs:isDefinedBy dom:.

xml:Document
    a owl:Class;
    rdfs:subClassOf dom:Document;
    rdfs:isDefinedBy xml:.

xml:Text
    a owl:Class;
    rdfs:subClassOf dom:Text;
    rdfs:isDefinedBy xml:.
    
xml:Element
    a owl:Class;
    rdfs:subClassOf dom:Element;
    rdfs:isDefinedBy xml:.
    
svg: a owl:Ontology;
     vann:preferredNamespacePrefix 'svg'.

svg:Document
    a owl:Class;
    rdfs:subClassOf xml:Document;
    rdfs:isDefinedBy svg:.
    
svg:Element
    a owl:Class;
    rdfs:subClassOf xml:Element;
    rdfs:isDefinedBy svg:.

svg:Text
    a owl:Class;
    rdfs:subClassOf xml:Text;
    rdfs:isDefinedBy svg:.

### SVG elements

svg:Path
    a owl:Class;
    xml:tag 'path';
    rdfs:subClassOf svg:Element;
    rdfs:isDefinedBy svg:.

### Properties

svg:d
    a owl:DatatypeProperty;
    xml:key 'd';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain svg:path;
    rdfs:range xsd:string;
    rdfs:isDefinedBy svg:.

### DATA

<https://data.rijksfinancien.nl/svg/doc/id/10/13> a svg:Path ;
    svg:d "M 60 120 Q 100 150 140 120" .


<https://data.rijksfinancien.nl/svg/doc/id/10/3> a svg:Circle ;
    svg:cx "100" ;
    svg:cy "100" ;
    svg:fill "yellow" ;
    svg:r "90" ;
    svg:stroke "black" ;
    svg:stroke-width "2" .

  xmlns:xsi 
    a owl:DatatypeProperty;
    xml:key 'xsi';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'xsi' attribute is used to specify the XML Schema Instance namespace within an XML document. It associates elements and attributes with XML Schema definitions."@en;
    skos:prefLabel 'the xsi attribute'@en;
    rdfs:isDefinedBy xmlns:.

  xmlns:rdf
    a owl:DatatypeProperty;
    xml:key 'rdf';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'rdf' attribute is used to specify the RDF namespace within an XML document. It associates elements and attributes with RDF resources and statements."@en;
    skos:prefLabel 'the rdf attribute'@en;
    rdfs:isDefinedBy xmlns:.

  xmlns:xlink 
    a owl:DatatypeProperty;
    xml:key 'xlink';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'xlink' attribute is used to specify the XLink namespace within an XML document. It associates elements and attributes with XLink resources and links."@en;
    skos:prefLabel 'the xlink attribute'@en;
    rdfs:isDefinedBy xmlns:.

  xmlns:dc 
    a owl:DatatypeProperty;
    xml:key 'dc';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'dc' attribute is used to specify the Dublin Core namespace within an XML document. It associates elements and attributes with Dublin Core metadata terms."@en;
    skos:prefLabel 'the dc attribute'@en;
    rdfs:isDefinedBy xmlns:.

  xmlns:cc
    a owl:DatatypeProperty;
    xml:key 'cc';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'cc' attribute is used to specify the Creative Commons namespace within an XML document. It associates elements and attributes with Creative Commons licenses and metadata."@en;
    skos:prefLabel 'the cc attribute'@en;
    rdfs:isDefinedBy xmlns:.




  xsi:nil
    a owl:DatatypeProperty;
    dct:conformsTo section:2.6.2;
    xml:key 'nil';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The xsi:nil attribute indicates whether an element has a nil value. When the xsi:nil attribute is set to 'true', it signifies that the element has no value. This attribute is typically used in XML Schema instance documents to represent null or empty values for elements defined in XML Schema."@en;
    skos:prefLabel 'the nil attribute'@en;
    rdfs:isDefinedBy xsi:.

  xsi:schemaLocation
    a owl:DatatypeProperty;
    dct:conformsTo section:2.6.3;
    xml:key 'schemaLocation';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'schemaLocation' attribute is used in XML documents associated with XML Schema validation. It specifies the location of the XML Schema definition (XSD) that describes the structure and constraints of elements in the document."@en;
    skos:prefLabel 'the schemaLocation attribute'@en;
    rdfs:isDefinedBy xsi:.

  xsi:type
    a owl:DatatypeProperty;
    dct:conformsTo section:2.6.1;
    xml:key 'type';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:definition "The 'type' attribute is used in XML documents associated with XML Schema validation. It specifies the data type of an element or an attribute in accordance with the XML Schema definition (XSD)."@en;
    skos:prefLabel 'the type attribute'@en;
    rdfs:isDefinedBy xsi:.

 
  xlink:actuate
    a owl:DatatypeProperty;
    dct:conformsTo section:5.6.2;
    xml:key 'actuate';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the mechanism for processing XLink."@en;
    skos:prefLabel 'the actuate attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:arcrole
    a owl:DatatypeProperty;
    dct:conformsTo section:5.5;
    xml:key 'arcrole';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the arc role for XLink."@en;
    skos:prefLabel 'the arcrole attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:from
    a owl:DatatypeProperty;
    dct:conformsTo section:5.7;
    xml:key 'from';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the from for XLink."@en;
    skos:prefLabel 'the from attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:href
    a owl:DatatypeProperty;
    dct:conformsTo section:5.4;
    xml:key 'href';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the reference for XLink."@en;
    skos:prefLabel 'the href attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:label
    a owl:DatatypeProperty;
    dct:conformsTo section:5.7;
    xml:key 'label';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the label for XLink."@en;
    skos:prefLabel 'the label attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:role
    a owl:DatatypeProperty;
    dct:conformsTo section:5.5;
    xml:key 'role';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the role for XLink."@en;
    skos:prefLabel 'the role attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:show
    a owl:DatatypeProperty;
    dct:conformsTo section:5.6.1;
    xml:key 'show';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the display behavior for XLink."@en;
    skos:prefLabel 'the show attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:title
    a owl:DatatypeProperty;
    dct:conformsTo section:5.5;
    xml:key 'title';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the title for XLink."@en;
    skos:prefLabel 'the title attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:to
    a owl:DatatypeProperty;
    dct:conformsTo section:5.7;
    xml:key 'to';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the to for XLink."@en;
    skos:prefLabel 'the to attribute'@en;
    rdfs:isDefinedBy xlink:.

  xlink:type
    a owl:DatatypeProperty;
    dct:conformsTo section:5.3;
    xml:key 'type';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the type for XLink."@en;
    skos:prefLabel 'the type attribute'@en;
    rdfs:isDefinedBy xlink:.
