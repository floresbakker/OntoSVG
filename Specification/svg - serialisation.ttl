prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix function: <https://data.rijksfinancien.nl/svg/model/function/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfa: <http://www.w3.org/ns/rdfa#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xml: <http://www.w3.org/XML/1998/namespace#>

prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix graph: <https://data.rijksfinancien.nl/svg/graph/>
prefix svg: <https://data.rijksfinancien.nl/svg/model/def/>
prefix respec: <https://respec.org/model/>
prefix rule: <https://data.rijksfinancien.nl/svg/model/rule/>
prefix section: <https://data.rijksfinancien.nl/svg/id/section/>
prefix shp: <https://data.rijksfinancien.nl/svg/model/shp/>
prefix standard: <https://data.rijksfinancien.nl/svg/id/standard/>
prefix target: <https://data.rijksfinancien.nl/svg/model/target/>


svg:
    a
      owl:Ontology,
      respec:Ontology,
      void:Dataset;
    dct:conformsTo 'https://www.w3.org/TR/SVG11/'^^xsd:anyURI;
    dct:created '2024-02-14'^^xsd:date;
    dct:creator
      'Flores Bakker';
    respec:introduction '''
In today's digital era, Scalable Vector Graphics (SVG) play a vital role in creating interactive and visually appealing web content. SVG provides a powerful framework for defining vector-based graphics using XML syntax, enabling high-quality rendering across various devices and resolutions. Whether it's creating intricate illustrations, interactive data visualizations, or animated icons, SVG empowers designers and developers to unleash their creativity while ensuring optimal performance and accessibility.

At the same time, it becomes more and more important with regard to such graphics to be able to generate, annotate, reuse, validate and understand them.

To harness the full potential of SVG, it's crucial to have a comprehensive description of its vocabulary - the elements and attributes that constitute SVG documents, with which SVG documents can be generated using semantic web technology. This RDF-based SVG Vocabulary aims to provide a structured representation of SVG elements and attributes, facilitating interoperability, generation, documentation, and tooling support for SVG-based applications.
'''@en;
   respec:objective '''The objective of this SVG Vocabulary is to define the elements and attributes of the SVG standard (currently conforming to SVG 1.1), providing clear definitions, usage guidelines, and examples to aid developers and designers in automatically creating SVG content using semantic web technology.'''@en;
    respec:audience '''This document is intended for web developers, graphic designers, and anyone involved in creating or working with SVG content and semantic web technology.'''@en;
    dct:description '''The SVG Vocabulary establishes a standard representation of SVG elements and attributes, enabling automatic generation of graphics using semantic web technology, leveraging interoperability and tooling support for SVG-based applications. It provides definitions for SVG elements such as <svg>, <rect>, <circle>, <path>, etc., along with their respective attributes such as 'fill', 'stroke', 'width', 'height', etc. This vocabulary adheres to the SVG 1.1 specification and can serve as a reference guide for implementing SVG features in web applications.'''@en;
    dct:abstract '''This RDF-based vocabulary defines the elements and attributes of Scalable Vector Graphics (SVG), providing a structured representation for SVG content. It aims to facilitate the generation of graphics using semantic web technology, interoperability, documentation, and tooling support for SVG-based applications.'''@en; 
    skos:example """

An example SVG document:

<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
  <svg height="200" width="200" xmlns="http://www.w3.org/2000/svg">
  
  <!-- Circle for the face -->
  <circle cx="100" cy="100" fill="yellow" r="90" stroke="black" stroke-width="2"></circle>
  
   <!-- Eyes -->
  <circle cx="70" cy="70" fill="black" r="10"></circle>
  <circle cx="130" cy="70" fill="black" r="10"></circle>
  
   <!-- Mouth (smile) -->
  <path d="M 60 120 Q 100 150 140 120" fill="none" stroke="black" stroke-width="3"></path></svg>

This can be represented in RDF using the SVG Vocabulary as follows:

@prefix doc: <https://data.rijksfinancien.nl/svg/doc/id/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix svg: <https://data.rijksfinancien.nl/svg/model/def/> .

doc:smileyDocument a svg:Document ;
    rdf:_1 doc:smiley ;
    dom:documentType documentType:svg .

doc:smiley a svg:Svg ;
    rdf:_1 doc:head ;
    rdf:_2 doc:leftEye ;
    rdf:_3 doc:rightEye ;
    rdf:_4 doc:mouth ;
    svg:height "200" ;
    svg:width "200" ;
    svg:xmlns "http://www.w3.org/2000/svg" .

doc:mouth a svg:Path ;
    svg:d "M 60 120 Q 100 150 140 120" ;
    svg:fill "none" ;
    svg:stroke "black" ;
    svg:stroke-width "3" .

doc:head a svg:Circle ;
    svg:cx "100" ;
    svg:cy "100" ;
    svg:fill "yellow" ;
    svg:r "90" ;
    svg:stroke "black" ;
    svg:stroke-width "2" .

doc:leftEye a svg:Circle ;
    svg:cx "70" ;
    svg:cy "70" ;
    svg:fill "black" ;
    svg:r "10" .

doc:rightEye a svg:Circle ;
    svg:cx "130" ;
    svg:cy "70" ;
    svg:fill "black" ;
    svg:r "10" .

""";
    dct:language 'iso639-1:en';
    dct:license 'https://creativecommons.org/licenses/by/4.0/'^^xsd:anyURI;
    dct:publisher <https://www.example.com>;
    dct:status status:UnderDevelopment;
    dct:title 'SVG Core Vocabulary'@en;
    dct:source <https://www.example.com/svg-vocabulary>;
    foaf:homepage 'https://www.example.com/'^^xsd:anyURI;
    owl:versionInfo '1.0';
    vann:preferredNamespacePrefix 'svg';
    vann:preferredNamespaceUri 'http://www.w3.org/2000/svg/';
    void:uriSpace 'http://www.w3.org/2000/svg/'^^xsd:anyURI.

### Serialization Logic

shp:SerializableElement
    a sh:NodeShape;
    sh:rule rule:Serialize_SVG_fragment_SVG_Element;
    sh:target target:SerializableElement;
    skos:prefLabel 'serializable element shape'@en;
    rdfs:isDefinedBy svg:.

  target:SerializableElement
    a sh:SPARQLTarget;
    sh:select '''
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix svg: <https://data.rijksfinancien.nl/svg/model/def/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

# Select the SVG element for which there does not yet exist an SVG
# fragment, with the additional requirement that each and any
# underlying child element contains an SVG fragment.
select $this {
  # Any XML element (`dom:Element`)
  $this a/rdfs:subClassOf* dom:Element.
  
  # The SVG element must not have an XML fragment yet.
  filter not exists {
    $this svg:fragment [].
  }
  # The SVG element may not contain one or more child elements that lack an SVG fragment.
  minus {
    $this ?member ?childElement.
    ?childElement a/rdfs:subClassOf* dom:Element.
    filter not exists {
      ?childElement svg:fragment [].
    }
  }
}''';
    rdfs:isDefinedBy svg:.

  rule:Serialize_SVG_fragment_SVG_Element
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates an SVG fragment for an SVG element.'@en;
    skos:prefLabel 'SVG element fragment serialisation rule'@en;
    sh:construct '''

prefix function: <https://data.rijksfinancien.nl/svg/model/function/>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix svg: <https://data.rijksfinancien.nl/svg/model/def/>
prefix xml: <http://www.w3.org/XML/1998/namespace#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>


construct {

  # create the SVG-fragment for the SVG-element to be serialized.
  $this svg:fragment ?fragment.
} where {

  # Get the SVG tag of the SVG-element to be serialized.
  $this a/xml:tag ?tag.

  # Get the (possibly empty) sequence of SVG attributes, if there are any.
  {
    select (group_concat(distinct ?attribute;separator=' ') as ?attributes) {
      $this ?attribute0 ?value.
      ?attribute0 rdfs:subPropertyOf xml:attribute.
      bind(function:getXMLKey(?attribute0) as ?key)
      bind(concat(?key,'="',str(?value),'"') as ?attribute)
    }
  }

  # Get the (possibly empty) sequence of child element fragments, if there are any.
  {
    select (group_concat(str(?fragment);separator='') as ?fragments) {
      {
        select ?member ?fragment {
          $this ?member ?element.
          ?element svg:fragment ?fragment.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
      }
    }
  }

  # Create the SVG fragment of this SVG element by combining everything retrieved above.
  bind(strdt(
    concat(
      # open tag and include any attributes if there are any
      '<',?tag,if(?attributes='','',concat(' ',?attributes)),'>',
      # retrieved svg content of children svg elements
      ?fragments,
      # close tag and cast as SVG snippet
      '</',?tag,'>'),xsd:string) as ?fragment)
}
''';
    rdfs:isDefinedBy svg:.


# Document

  shp:Document
    a sh:NodeShape;
    sh:description 'A SVG document contains a required documenttype SVG and a root SVG element.'@en;
    sh:name 'SVG Document'@en;
    sh:property
      shp:Document_documentType,
      shp:Document_root;
    sh:rule rule:Document;
    sh:target target:Document;
    rdfs:isDefinedBy svg:.

  target:Document
    a sh:SPARQLTarget;
    sh:select '''
prefix svg: <https://data.rijksfinancien.nl/svg/model/def/>

select $this {
  $this a svg:Document.
  filter not exists {
    $this svg:fragment [].
  }
}''';
    rdfs:isDefinedBy svg:.

  rule:Document
    a sh:SPARQLRule;
    rdfs:comment 'A rule that creates the upper SVG fragment for an SVG document and connects it with the previously generated tree of serialized SVG elements and their SVG fragments.'@en;
    rdfs:label 'SVG document generation rule'@en;
    sh:construct '''
prefix documentType: <https://data.rijksfinancien.nl/dom/model/id/documentType/>
prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
prefix svg: <https://data.rijksfinancien.nl/svg/model/def/>
prefix prov: <http://www.w3.org/ns/prov#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix rule: <https://data.rijksfinancien.nl/svg/model/rule/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

construct {
  $this
    dom:documentType documentType:svg;
    svg:fragment ?fragmentDocument;
    prov:wasGeneratedBy ?activity.
  ?activity
    a prov:Activity;
    prov:atTime ?activityDateTime;
    prov:used
      svg: , # SVG Ontology
      rule:Document.
} where {
  $this ?member ?root.
  ?root rdf:type svg:Svg;
        svg:fragment ?fragmentRoot.
  bind(strdt(concat("""<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" 
  "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">""",str(?fragmentRoot)),xsd:string) as ?fragmentDocument)
  bind(iri(concat(str($this),'-svg-document-generation')) as ?activity)
  bind(now() as ?activityDateTime)
}''';
    rdfs:isDefinedBy svg:.

  shp:Document_documentType
    a sh:PropertyShape;
    rdfs:comment 'An SVG document contains excactly one document type with value ‘SVG’.'@en;
    rdfs:label 'has document type SVG'@en;
    sh:hasValue documentType:svg;
    sh:minCount 1;
    sh:maxCount 1;
    sh:path dom:documentType;
    rdfs:isDefinedBy svg:.

  shp:Document_root
    a sh:PropertyShape;
    rdfs:comment 'The <svg> tag is the root of the SVG document and a container for all other SVG elements (except for the <!DOCTYPE> tag). A SVG document contains no less and no more than one svg tag.'@en;
    rdfs:label 'has root element svg'@en;
    sh:class svg:Svg;
    sh:minCount 1;
    sh:maxCount 1;
    sh:path rdfs:member;
    rdfs:isDefinedBy svg:.

function:getXMLKey
    a sh:SPARQLFunction ;
    rdfs:comment "Returns the key of an XML attribute, either with or without prefix." ;
    sh:parameter [
        sh:path function:attribute ;
        sh:datatype xsd:anyURI ;
        sh:description "An xml attribute as defined in an ontology." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix vann: <http://purl.org/vocab/vann/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix xml: <http://www.w3.org/XML/1998/namespace#>

SELECT ?result WHERE {
         $attribute xml:key ?key;
         rdfs:isDefinedBy ?ontology.   
         ?ontology vann:preferredNamespacePrefix ?prefix.
         BIND(IF(?prefix = "svg" || $attribute = xml:xmlns,?key, CONCAT(?prefix,":",?key)) as ?result).
  }

       """ .