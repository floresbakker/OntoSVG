# Generic prefixes
prefix dcm: <http://purl.org/dc/dcmitype/>
prefix dct: <http://purl.org/dc/terms/>
prefix dom: <http://www.w3.org/DOM/model/def/>
prefix foaf: <http://xmlns.com/foaf/0.1/>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix status: <http://purl.org/adms/status/>
prefix vann: <http://purl.org/vocab/vann/>
prefix void: <http://rdfs.org/ns/void#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>

# XML prefixes
prefix decl: <http://www.w3.org/XML/id/decl/>
prefix function: <http://www.w3.org/XML/model/function/>
prefix rule: <http://www.w3.org/XML/model/rule/>
prefix section: <http://www.w3.org/XML/id/section/>
prefix shp: <http://www.w3.org/XML/model/shp/>
prefix standard: <http://www.w3.org/XML/id/standard/>
prefix target: <http://www.w3.org/XML/model/target/>
prefix xml: <http://www.w3.org/XML/model/def/> 

#xml: {
  xml:
    a
      owl:Ontology,
      void:Dataset;
    dct:created '2023-10-29'^^xsd:date;
    dct:creator
      'Flores Bakker';
    dct:language 'iso639-1:en';
    dct:license 'http://creativecommons.org/licenses/by/4.0'^^xsd:anyURI;
    dct:publisher <https://rijksfinancien.nl>;
    dct:status status:UnderDevelopment;
    dct:subject 'xml'@en;
    dct:title 'XML Ontology'@en;
    dct:source <https://github.com/floresbakker/xmlvoc>;
    dct:abstract "The XML Core Ontology provides a formal representation of the Extensible Markup Language (XML) Version 1.0 (Fifth Edition). It defines classes and properties to describe the structure and semantics of XML documents, elements, attributes, comments, processing instructions, CDATA sections, and text elements."@en;
    dct:description "The XML Ontology formalizes the Extensible Markup Language (XML) Version 1.0 (Fifth Edition), offering a structured representation of its components and features. It includes definitions for essential concepts such as XML documents, elements, attributes, comments, processing instructions, CDATA sections, and text elements. The ontology serves as a reference for understanding and working with XML within the context of RDF-based applications."@en;
    foaf:depiction 'https://www.rijksfinancien.nl/themes/custom/indicia_theme/files/logo-rijksoverheid.svg'^^xsd:anyURI;
    foaf:homepage 'https://www.rijksfinancien.nl/'^^xsd:anyURI;
    owl:imports
      dct:,
      owl:,
      rdf:,
      rdfs:,
      skos:;
    sh:declare
      decl:dom,
      decl:function, 
      decl:xml,
      decl:rdf,
      decl:rdfs,
      decl:xsd;      
    owl:versionInfo '0.1.0';
    vann:preferredNamespacePrefix 'xml';
    vann:preferredNamespaceUri 'http://www.w3.org/XML/model/def/';
    void:uriRegexPattern '^http://www.w3.org/XML/model/def/';
    void:uriSpace 'http://www.w3.org/XML/model/def/'^^xsd:anyURI.

  decl:dom
    sh:prefix "dom";
    sh:namespace "http://www.w3.org/DOM/model/def/"^^xsd:anyURI.

  decl:function
    sh:prefix "function";
    sh:namespace "http://www.w3.org/XML/model/function/"^^xsd:anyURI.    

  decl:xml
    sh:prefix "xml";
    sh:namespace "http://www.w3.org/XML/model/def/"^^xsd:anyURI.

  decl:rdf
    sh:prefix "rdf";
    sh:namespace "http://www.w3.org/1999/02/22-rdf-syntax-ns#"^^xsd:anyURI.

  decl:rdfs
    sh:prefix "rdfs";
    sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI.

  decl:xsd
    sh:prefix "xsd";
    sh:namespace "http://www.w3.org/2001/XMLSchema#"^^xsd:anyURI.

  standard:xml
    a dct:Standard;
    dct:created '2021-11-09'^^xsd:date;
    dct:source 'http://www.w3.org/TR/xml11'^^xsd:anyURI;
    skos:prefLabel 'Extensible Markup Language (XML) 1.1 (Second Edition)'@en;
    rdfs:isDefinedBy xml:.

### Sections from the XML Specification

  section:Document
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'XML Document'@en;
    rdfs:isDefinedBy xml:.

  section:Elements
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'Elements'@en;
    rdfs:isDefinedBy xml:.

  section:Attributes
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'Attributes'@en;
    rdfs:isDefinedBy xml:.

  section:Comments
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'Comments'@en;
    rdfs:isDefinedBy xml:.

  section:ProcessingInstructions
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'Processing Instructions'@en;
    rdfs:isDefinedBy xml:.

  section:CDATASections
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'CDATA Sections'@en;
    rdfs:isDefinedBy xml:.

  section:TextElements
    a dcm:Text;
    dct:isPartOf standard:xml;
    dct:source 'https://www.w3.org/TR/xml/#sec-intro'^^xsd:anyURI;
    skos:prefLabel 'Text Elements'@en;
    rdfs:isDefinedBy xml:.

### XML Classes

  xml:Document
    a owl:Class;
    rdfs:subClassOf dom:Document;
    skos:definition 'A document encoded in XML (eXtensible Markup Language).'@en;
    skos:prefLabel 'xml document'@en;
    rdfs:isDefinedBy xml:.

  xml:DocumentType
    a owl:Class;
    rdfs:subClassOf dom:DocumentType;
    skos:definition 'A DOCTYPE is a required preamble.'@en;
    skos:prefLabel 'the DOCTYPE'@en;
    skos:example'<!DOCTYPE xml>';
    rdfs:isDefinedBy xml:.
    
  xml:Element
    a owl:Class;
    dct:conformsTo section:XML-Spec;
    rdfs:subClassOf dom:Element;
    skos:definition 'An XML element in the Document Object Model (DOM) represents a unit of data in an XML document.'@en;
    skos:prefLabel 'XML DOM element'@en;
    rdfs:isDefinedBy xml:.

  xml:Attribute
    a owl:Class;
    dct:conformsTo section:XML-Spec;
    rdfs:subClassOf dom:Attribute;    
    skos:definition 'An XML attribute is a name-value pair associated with an XML element.'@en;
    skos:prefLabel 'XML Attribute'@en;
    rdfs:isDefinedBy xml:.

  xml:Comment
    a owl:Class;
    dct:conformsTo section:XML-Spec;
    rdfs:subClassOf dom:Comment;    
    skos:definition 'An XML comment is a piece of text within an XML document that is not interpreted as markup by the XML processor.'@en;
    skos:prefLabel 'XML Comment'@en;
    rdfs:isDefinedBy xml:.

  xml:ProcessingInstruction
    a owl:Class;
    dct:conformsTo section:XML-Spec;
    rdfs:subClassOf dom:ProcessingInstruction;
    skos:definition 'An XML processing instruction provides instructions to the XML processor.'@en;
    skos:prefLabel 'XML Processing Instruction'@en;
    rdfs:isDefinedBy xml:.

  xml:CDATASection
    a owl:Class;
    dct:conformsTo section:XML-Spec;
    rdfs:subClassOf dom:CDATASection;    
    skos:definition 'A CDATA section in an XML document is used to include blocks of text that should not be interpreted as markup by the XML processor.'@en;
    skos:prefLabel 'XML CDATA Section'@en;
    rdfs:isDefinedBy xml:.

  xml:Text
    a owl:Class;
    rdfs:subClassOf dom:Text;
    skos:definition 'A DOM node in a XML document that has textual content and that does not contain any XML vocabulary.'@en;
    skos:prefLabel 'text'@en;
    rdfs:isDefinedBy xml:.
    
### XML properties ###

  xml:documentTypeName
    a owl:DatatypeProperty;
    rdfs:domain xml:DocumentType;
    rdfs:range xsd:string;
    skos:definition "Specifies the doctype name of a doctype declaration in a XML document."@en;
    skos:prefLabel 'has document type name'@en;
    rdfs:isDefinedBy xml:.
 
  xml:attribute
    a owl:DatatypeProperty;
    rdfs:domain xml:Element;
    rdfs:range rdfs:Literal;
    skos:definition "Property that is the parent property of all existing XML attributes. An attribute is a name-value pair that is associated with an XML element. Attributes provide additional information about an element and are specified within the start tag of an element. Attributes can modify the behavior or appearance of an element, define relationships between elements, or provide other metadata. The name of the attribute is followed by an equal sign (=) and the attribute's value, which is enclosed in double or single quotes. Some attributes affect the element simply by their presence in the start tag of the element, with the value implicitly being an empty string."@en;
    skos:prefLabel 'has attribute property'@en;
    rdfs:isDefinedBy xml:.

  xml:xmlns
    a owl:DatatypeProperty;
    xml:key 'xmlns';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:prefLabel 'the xmlns attribute'@en;
	skos:definition "Specifies a namespace."@en;
    rdfs:isDefinedBy xml:.

  xml:fragment
    a owl:DatatypeProperty;
    rdfs:domain
      [ a owl:Class;
        owl:unionOf
          ( xml:CDATASection
            xml:Comment
            xml:Document
            xml:DocumentType
            xml:Element
            xml:Text
            ) ];
    rdfs:range rdf:XML;
    skos:definition 'Property that links a node in a XML-document with its XML fragment.'@en;
    skos:prefLabel 'fragment property'@en;
    rdfs:isDefinedBy xml:.

  xml:id
    a owl:DatatypeProperty;
    xml:key 'id';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:prefLabel 'the id attribute'@en;
	skos:definition "Specifies an identifier for an XML element."@en;
    rdfs:isDefinedBy xml:.

  xml:name
    a owl:DatatypeProperty;
    xml:key 'name';
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    rdfs:subPropertyOf xml:attribute;
    skos:prefLabel 'the name attribute'@en;
	skos:definition "Specifies a name for an XML element."@en;
    rdfs:isDefinedBy xml:.

  xml:base
    a owl:DatatypeProperty;
    xml:key 'base';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the base for XML."@en;
    skos:prefLabel 'the base attribute'@en;
    rdfs:isDefinedBy xml:.

  xml:lang
    a owl:DatatypeProperty;
    xml:key 'lang';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the language for XML."@en;
    skos:prefLabel 'the lang attribute'@en;
    rdfs:isDefinedBy xml:.

  xml:space
    a owl:DatatypeProperty;
    xml:key 'space';
    rdfs:subPropertyOf xml:attribute;
    rdfs:domain xml:Element;
    rdfs:range xsd:string;
    skos:definition "Specifies the space for XML."@en;
    skos:prefLabel 'the space attribute'@en;
    rdfs:isDefinedBy xml:.

### XML Shapes ###

shp:SerializableNode
    a sh:NodeShape;
    sh:rule rule:XMLFragmentSerializationAlgorithm;
    sh:target target:SerializableNode;
    skos:prefLabel 'serializable node shape'@en;
    rdfs:isDefinedBy xml:.

  target:SerializableNode
    a sh:SPARQLTarget;
    rdfs:comment 'Select nodes in a XML document that do not have an XML fragment yet, and whose child nodes all have an XML fragment already.'@en;
    sh:prefixes xml:;
    sh:select '''
select $this {

  # Select all DOM nodes... 
  $this a/rdfs:subClassOf* dom:Node.
  
  filter not exists { $this rdfs:isDefinedBy dom:}
  
  # ...that do not yet have an xml fragment.
  filter not exists { $this xml:fragment []. }
  
  # ...but whose child nodes all have an xml fragment
  minus {
    $this ?member ?child.
    filter(strstarts(str(?member),concat(str(rdf:),'_')))               
    filter not exists { ?child xml:fragment []. }
    ?child a/rdfs:subClassOf* dom:Node.
  }
}''';
    rdfs:isDefinedBy xml:.

  rule:XMLFragmentSerializationAlgorithm
    a sh:SPARQLRule;
    rdfs:comment 'Create the XML fragment for a node in a XML document.'@en;
    skos:prefLabel 'XML fragment serialization algorithm'@en;
    sh:prefixes xml:;
    sh:construct '''
construct {

  # Assert the new XML fragment for this node in the XML document
  $this xml:fragment ?fragment.
  
} where {

  # Establish the class of the node in the XML document
  $this a/rdfs:subClassOf* ?classXML.
  ?classXML rdfs:isDefinedBy xml:.

  # Build the XML fragment for the node in the XML document depending on its class
  bind(if(?classXML = xml:Element,                function:getElementFragment($this), 
       if(?classXML = xml:Text ,                  function:getTextFragment($this), 
       if(?classXML = xml:Comment,                function:getCommentFragment($this), 
       if(?classXML = xml:CDATASection,           function:getCDATASectionFragment($this), 
       if(?classXML = xml:ProcessingInstruction,  function:getProcessingInstructionFragment($this), 
       if(?classXML = xml:DocumentType,           function:getDocumentTypeFragment($this), 
       if(?classXML = xml:Document,               function:getChildNodeFragment($this), ?unboundDummy)))))))
  as ?fragmentString)
  
  # Convert result from string to rdf:XML
  bind(strdt(str(?fragmentString), rdf:XML) as ?fragment)

}''';
    rdfs:isDefinedBy xml:.

function:getElementFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML element in a XML document." ;
    sh:parameter [
        sh:path function:elementXML ;
        sh:datatype xsd:anyURI ;
        sh:description "A xml element in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/model/function/>  
    prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    prefix vann: <http://purl.org/vocab/vann/>
    prefix xml: <http://www.w3.org/XML/model/def/>
    
    select ?result where {
    
    # Retrieve the tag name & namespace of the element.
    $elementXML a ?class.
    ?class xml:tag ?tag;
           rdfs:isDefinedBy ?ontology.
      
    # Get the XML attributes for the element, if there are any.
    bind(function:getElementAttribute($elementXML, ?ontology) as ?attributes)
 
    # Get the XML fragments of child nodes for the element, if there are any.
    bind(function:getChildNodeFragment($elementXML) as ?childFragments)
    
    # Build the XML fragment for this XML element, by combining everything retrieved above.
    bind(
    concat(
      '<',?tag,if(?attributes='','',concat(' ',?attributes)),'>',
      if(?childFragments='',concat('</',?tag,'>'),concat(?childFragments,'</',?tag,'>'))) as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
      
}
	
""" .

function:getTextFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML text node in a XML document." ;
    sh:parameter [
        sh:path function:text ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML text node in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
    
    prefix dom: <https://data.rijksfinancien.nl/dom/model/def/>
    prefix xsd: <http://www.w3.org/2001/XMLSchema#>     
    
    select ?result where {
    
    # Text is stored in de data attribute of DOM text nodes
    $text dom:data ?data.
    
    # Establish the XML fragment for this XML text node
    bind(strdt(?data,xsd:string) as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
}
	
""" .

function:getCommentFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML comment in a XML document." ;
    sh:parameter [
        sh:path function:comment ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML comment in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/model/function/>
    
    select ?result where {
     
    # Establish the XML fragment for this XML comment
    bind(concat('<!--',function:getChildNodeFragment($comment),'-->') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
}
	
""" .

function:getCDATASectionFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML CDATA Section in a XML document." ;
    sh:parameter [
        sh:path function:CDATASection ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML CDATA Section in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/model/function/>
    
    select ?result where {
     
    # Establish the XML fragment for this XML CDATA
    bind(concat('<![CDATA[',function:getChildNodeFragment($CDATASection),']]>') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)  
}
	
""" .

function:getProcessingInstructionFragment
    a sh:SPARQLFunction ;
    rdfs:processingInstruction "Returns a XML fragment for a XML processing instruction in a XML document." ;
    sh:parameter [
        sh:path function:processingInstruction ;
        sh:datatype xsd:anyURI ;
        sh:description "A XML processing instruction in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/model/function/>       
    
    select ?result where {

    # Establish the XML fragment for this XML processingInstruction
    bind(concat('<?',function:getChildNodeFragment($processingInstruction),'>') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)    
}
	
""" .

function:getDocumentTypeFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML DocumentType in a XML document." ;
    sh:parameter [
        sh:path function:doctype ;
        sh:datatype xsd:anyURI ;
        sh:description "An XML DocumentType in a XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
    
    prefix xml: <http://www.w3.org/XML/model/def/>
    
    select ?result where {
    
    # Establish the doctype name for this Document Type.
    $doctype xml:documentTypeName ?name.
    bind(concat('<!DOCTYPE ',str(?name),'>') as ?fragment)
    bind(if(bound(?fragment),?fragment,'') as ?result)    
}
	
""" .
	
function:getDocumentFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment for a XML Document" ;
    sh:parameter [
        sh:path function:xmlDocument ;
        sh:datatype xsd:anyURI ;
        sh:description "An XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """

    prefix function: <http://www.w3.org/XML/model/function/>    
    
    select ?result where {
    
    # Establish the XML fragment of the XML document by retrieving the XML fragments of all child nodes.
    bind(function:getChildNodeFragment($xmlDocument) as ?result)
    
}
	
""" .

function:getChildNodeFragment
    a sh:SPARQLFunction ;
    rdfs:comment "Returns a XML fragment of child nodes for a node in an XML Document" ;
    sh:parameter [
        sh:path function:parentNode ;
        sh:datatype xsd:anyURI ;
        sh:description "A node in an XML document." ;
    ] ;
    sh:returnType xsd:string ;
    sh:select """
    
    prefix xml: <http://www.w3.org/XML/model/def/>
  	prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    prefix xsd: <http://www.w3.org/2001/XMLSchema#> 
    
    select ?result where {
    
    { # Get the XML fragments of child nodes, if there are any.
    select $parentNode (group_concat(str(?childFragment);separator='') as ?childFragments) {
      {
        select $parentNode ?member ?childFragment {
          $parentNode ?member ?childNode.
          filter(strstarts(str(?member),concat(str(rdf:),'_')))
          ?childNode xml:fragment ?childFragment.
        }
        order by xsd:integer(strafter(str(?member),concat(str(rdf:),'_')))
       }
      } group by $parentNode
     }
    bind(if(bound(?childFragments),?childFragments,'') as ?result) 
    }
""" .

function:getElementAttribute
    a sh:SPARQLFunction ;
    rdfs:comment "Returns an XML attribute of an XML element" ;
    sh:parameter [
        sh:path function:elementXML ;
        sh:datatype xsd:anyURI ;
        sh:description "An XML element in an XML document." ;
        sh:order 1;
    ] ;
     sh:parameter [
        sh:path function:ontology ;
        sh:datatype xsd:anyURI ;
        sh:description "A ontology that defines an element class." ;
        sh:order 2;
    ] ;   
    sh:returnType xsd:string ;
    sh:select """
    
    prefix function: <http://www.w3.org/XML/model/function/>    
    prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
    prefix vann: <http://purl.org/vocab/vann/>
    prefix xml: <http://www.w3.org/XML/model/def/>
    
    select ?result where {

    { # Get the XML attributes for this element, if there are any.
    
    select $elementXML (group_concat(distinct ?attributeFragment) as ?attributesFragment) {  
 
      $elementXML ?attribute ?value.
      ?attribute rdfs:subPropertyOf xml:attribute;
                 xml:key ?key;
                 rdfs:isDefinedBy ?ontologyAttribute.   
      ?ontologyAttribute vann:preferredNamespacePrefix ?prefix.
         
      # Establish whether we need a prefixed key or not, based on whether the attribute is from a foreign ontology or not. If the attribute in question is defined in the same ontology of the element, we do not have to include a prefix in the key of the attribute. If the attribute is from some ontology other than the one of the element, we append the prefix to the key. An exception is made for the xml:xmlns attribute.
         
      bind(if(?ontologyAttribute = $ontology || ?attribute = xml:xmlns,?key,concat(?prefix,":",?key)) as ?prefixedKey)
      
      # Establish a key - value pair for the attribute
      bind(concat(?prefixedKey,'="',str(?value),'"') as ?attributeFragment)
      } group by $elementXML
     }
    # Establish result     
    bind(if(bound(?attributesFragment),?attributesFragment,'') as ?result)     
    }
""" .

#}